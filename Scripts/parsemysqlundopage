#!/usr/bin/python

# This script is used to parse mysql undo log records belong to normal undo
# pages.
# Author: Yuanyuan Nie (2020/02/14)
#
# Usage: ./parsemysqlundopage <undo_file> [, <out_dir>]
#
# Note:
# 1. The undo_file should be the path to the undo page file
# 2. The out_dir is current dir if not defined

import os
import struct
import sys

# Predefined constants.
UNIV_PAGE_SIZE = 16384
FSP_TRX_SYS_PAGE_NO = 5 # transaction system header, in tablespace 0

FIL_PAGE_DATA = 38

# The low 4 bytes of this are used to store the page checksum, the last 4 bytes
# should be identical to the last 4 bytes of FIL_PAGE_LSN
FIL_PAGE_END_LSN_OLD_CHKSUM = 8
FIL_PAGE_DATA_END = 8

# The offset of the doublewrite buffer header on the trx system header page
TRX_SYS_DOUBLEWRITE = (UNIV_PAGE_SIZE - 200)

TRX_SYS_DOUBLEWRITE_MAGIC_N = 536853855

TRX_SYS_N_RSEGS = 128
TRX_SYS_OLD_N_RSEGS = 256

TRX_RSEG_N_SLOTS = 1024
XIDDATASIZE = 128

# Types of an undo log segment
TRX_UNDO_INSERT = 1 # contains undo entries for inserts
TRX_UNDO_UPDATE = 2 # contains undo entries for updates and delete markings:
# in short, modifys (the name 'UPDATE' is a historical relic)

TRX_UNDO_INSERT_REC = 11 # fresh insert into clustered index
TRX_UNDO_UPD_EXIST_REC = 12 # update of a non-delete-marked record
TRX_UNDO_UPD_DEL_REC = 13 # update of a delete marked record to a not delete
# marked record; also the fields of the record can change
TRX_UNDO_DEL_MARK_REC = 14 # delete marking of a record; fields do not change

TRX_UNDO_CMPL_INFO_MULT = 16 # compilation info is multiplied by this and ORed
# to the type above
TRX_UNDO_MODIFY_BLOB = 64 # If this bit is set in type_cmpl, then the undo log
# record has support for partial update of BLOBs. Also to make the undo log
# format extensible, introducing a new flag next to the type_cmpl flag.

def mach_read_from_1(fp):
    c0, = struct.unpack('B', fp.read(1))
    return (c0)

def mach_read_from_2(fp):
    c0,c1 = struct.unpack('BB', fp.read(2))
    return (c0<<8) + (c1)

def mach_read_from_3(fp):
    c0,c1,c2 = struct.unpack('BBB', fp.read(3))
    return (c0<<16) + (c1<<8) + (c2)

def mach_read_from_4(fp):
    c0,c1,c2,c3 = struct.unpack('BBBB', fp.read(4))
    # print ("{0:d} {1:d} {2:d} {3:d}".format(c0, c1, c2, c3)),
    return (c0<<24) + (c1<<16) + (c2<<8) + (c3)

def mach_read_from_8(fp):
    c0,c1,c2,c3,c4,c5,c6,c7 = struct.unpack('BBBBBBBB', fp.read(8))
    return (c0<<56) + (c1<<48) + (c2<<40) + (c3<<32) + (c4<<24) + (c5<<16) + (c6<<8) + (c7)

def mach_read_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        return (val)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
        fp.seek(-2, 1)
        return (val)
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
        fp.seek(-3, 1)
        return (val)
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
        fp.seek(-4, 1)
        return (val)
    else:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
        fp.seek(-5, 1)
        return (val)

def mach_read_next_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        fp.seek(1, 1)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
    else:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
    return (val)

def mach_read_next_much_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        fp.seek(1, 1)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
    elif val == 0xF0:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
    else:
        # 11111111 followed by up to 64 bits
        fp.seek(1, 1)
        val = mach_read_next_compressed(fp)
        val = val << 32
        val |= mach_read_next_compressed(fp)
    return (val)

def mach_u64_read_next_compressed(fp):
  val = mach_read_next_compressed(fp)
  val <<= 32
  val |= mach_read_from_4(fp)
  return (val)

def hex_print_from_n(bin_fp, report_fp, n):
    cnt = 0
    while cnt < n:
        c, = struct.unpack('B', bin_fp.read(1))
        print >> report_fp, ("{0:02X}".format(c)),
        cnt = cnt + 1
    print >> report_fp

def print_fil_header(bin_fp, report_fp):
    print >> report_fp, "FIL_PAGE_CHKSUM:",
    hex_print_from_n(bin_fp, report_fp, 4)
    print >> report_fp, "FIL_PAGE_OFFSET:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_PREV:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_NEXT:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_LSN:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FIL_PAGE_TYPE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FIL_PAGE_FILE_FLUSH_LSN:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FIL_PAGE_SPACE_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))

def print_fil_tailer(bin_fp, report_fp):
    print >> report_fp, "FIL_PAGE_END_LSN_OLD_CHKSUM:",
    hex_print_from_n(bin_fp, report_fp, 8)

next_undo_page_no = 0xFFFFFFFF
next_undo_byte_offset = 0
def print_undo_log_records(bin_fp, report_fp, offset, undo_log_offset, trx_undo_page_free):
    cnt = 0
    while undo_log_offset > 0 and undo_log_offset < trx_undo_page_free:
        print >> report_fp, "UNDO LOG REC #" + str(cnt) + ":"
        print >> report_fp, "\tOFFSET TO UNDO REC:",
        print >> report_fp, ("{0:d}".format(undo_log_offset))
        bin_fp.seek(offset + undo_log_offset)
        print >> report_fp, "\tOFFSET TO NEXT UNDO REC:",
        next_undo_log_offset = mach_read_from_2(bin_fp)
        print >> report_fp, ("{0:d}".format(next_undo_log_offset))
        undo_rec_type = mach_read_from_1(bin_fp)
        blob_undo = 0
        if undo_rec_type == TRX_UNDO_INSERT_REC:
            print >> report_fp, "\tUNDO REC TYPE:", "TRX_UNDO_INSERT_REC"
        else:
            print >> report_fp, "\tUNDO REC TYPE:",
            if undo_rec_type > TRX_UNDO_MODIFY_BLOB:
                print >> report_fp, "TRX_UNDO_MODIFY_BLOB |",
                undo_rec_type -= TRX_UNDO_MODIFY_BLOB
                blob_undo = 1
            if undo_rec_type > TRX_UNDO_CMPL_INFO_MULT:
                cmpl_info = undo_rec_type / TRX_UNDO_CMPL_INFO_MULT
                print >> report_fp, ("TRX_UNDO_CMPL_INFO_MULT*{0:d} |".format(cmpl_info)),
                undo_rec_type -= cmpl_info * TRX_UNDO_CMPL_INFO_MULT
            if undo_rec_type == TRX_UNDO_UPD_EXIST_REC:
                print >> report_fp, "TRX_UNDO_UPD_EXIST_REC"
            elif undo_rec_type == TRX_UNDO_UPD_DEL_REC:
                print >> report_fp, "TRX_UNDO_UPD_DEL_REC"
            elif undo_rec_type == TRX_UNDO_DEL_MARK_REC:
                print >> report_fp, "TRX_UNDO_DEL_MARK_REC"
            else:
                print >> report_fp, ("UNKNOWN_{0:d}".format(undo_rec_type))
        if blob_undo == 1:
            # Introduced a new 1-byte flag in trx_undo_page_report_modify
            bin_fp.seek(1, 1)
        print >> report_fp, "\tUNDO REC NO:",
        undo_no = mach_read_next_much_compressed(bin_fp)
        print >> report_fp, ("{0:d}".format(undo_no))
        print >> report_fp, "\tTABLE ID:",
        table_id = mach_read_next_much_compressed(bin_fp)
        print >> report_fp, ("{0:d}".format(table_id))
        if undo_rec_type == TRX_UNDO_INSERT_REC:
            primary_key_offset = bin_fp.tell() - offset
            while primary_key_offset < next_undo_log_offset - 2:
                print >> report_fp, "\tPRIMARY KEY LEN:",
                primary_key_len = mach_read_from_1(bin_fp)
                print >> report_fp, ("{0:d}".format(primary_key_len))
                print >> report_fp, "\tPRIMARY KEY VAL:",
                hex_print_from_n(bin_fp, report_fp, primary_key_len)
                primary_key_offset = primary_key_offset + 1 + primary_key_len
                bin_fp.seek(offset + primary_key_offset)
            print >> report_fp, "\tOFFSET TO START:",
            print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        elif undo_rec_type == TRX_UNDO_UPD_EXIST_REC or undo_rec_type == TRX_UNDO_UPD_DEL_REC or undo_rec_type == TRX_UNDO_DEL_MARK_REC:
            print >> report_fp, "\tINFO BITS:",
            hex_print_from_n(bin_fp, report_fp, 1)
            print >> report_fp, "\tDATA_TRX_ID:",
            trx_id = mach_u64_read_next_compressed(bin_fp)
            print >> report_fp, ("{0:d}".format(trx_id))
            print >> report_fp, "\tDATA_ROLL_PTR:",
            roll_ptr = mach_u64_read_next_compressed(bin_fp)
            print >> report_fp, ("0x{0:X}".format(roll_ptr))
            print >> report_fp, "\tPRIM_KEY/N_FIELDS/COL_ID/COL:",
            xxx_offset = bin_fp.tell() - offset
            hex_print_from_n(bin_fp, report_fp, next_undo_log_offset - xxx_offset - 2)
            print >> report_fp, "\tOFFSET TO START:",
            print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        undo_log_offset = next_undo_log_offset
        cnt = cnt + 1

def print_undo_log_normal_page(bin_fp, report_fp):
    offset = bin_fp.tell()
    print_fil_header(bin_fp, report_fp)
    print >> report_fp, "TRX_UNDO_PAGE_TYPE:",
    trx_undo_page_type = mach_read_from_2(bin_fp)
    if trx_undo_page_type == TRX_UNDO_INSERT:
        print >> report_fp, "TRX_UNDO_INSERT"
    elif trx_undo_page_type == TRX_UNDO_UPDATE:
        print >> report_fp, "TRX_UNDO_UPDATE"
    else:
        print >> report_fp, ("UNKNOWN_{0:d}".format(trx_undo_page_type))
    print >> report_fp, "TRX_UNDO_PAGE_START:",
    trx_undo_page_start = mach_read_from_2(bin_fp)
    print >> report_fp, ("{0:d}".format(trx_undo_page_start))
    print >> report_fp, "TRX_UNDO_PAGE_FREE:",
    trx_undo_page_free = mach_read_from_2(bin_fp)
    print >> report_fp, ("{0:d}".format(trx_undo_page_free))
    print >> report_fp, "TRX_UNDO_PAGE_NODE (FLST_PREV):",
    print >> report_fp, ("({0:d} {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    print >> report_fp, "TRX_UNDO_PAGE_NODE (FLST_NEXT):",
    next_undo_page_no = mach_read_from_4(bin_fp)
    next_undo_byte_offset = mach_read_from_2(bin_fp)
    print >> report_fp, ("({0:d} {1:d})".format(next_undo_page_no, next_undo_byte_offset))
    # undo_log_offset = bin_fp.tell() - offset
    # print_undo_log_records(bin_fp, report_fp, offset, undo_log_offset, trx_undo_page_free)
    print_undo_log_records(bin_fp, report_fp, offset, trx_undo_page_start, trx_undo_page_free)
    bin_fp.seek(offset + UNIV_PAGE_SIZE - 8)
    print_fil_tailer(bin_fp, report_fp)

# User input variables.
if not len(sys.argv) == 2 and not len(sys.argv) == 3:
    print "Usage: ./parsemysqlundopage <undo_file> [, <out_dir>]"
    sys.exit(1)

undo_file = sys.argv[1]
if os.path.isfile(undo_file):
    undo_file = os.path.abspath(undo_file)
else:
    print "Unknown undo file " + undo_file
    sys.exit(1)

if len(sys.argv) == 2:
    out_dir = os.getcwd()
else:
    out_dir = sys.argv[2]
    if os.path.isdir(out_dir):
        out_dir = os.path.abspath(out_dir)
    else:
        print "Unknown output directory " + out_dir
        sys.exit(1)
report_file = os.path.join(out_dir, os.path.basename(undo_file) + ".report")
report_fp = open(report_file, 'w')

with open(undo_file, 'rb') as bin_fp:
    bin_fp.seek(0, 2) # seek to the end of the file
    num_pages = bin_fp.tell() / UNIV_PAGE_SIZE
    idx = 0
    while idx < num_pages:
        bin_fp.seek(UNIV_PAGE_SIZE*idx)
        print >> report_fp, "--- UNDO PAGE #" + str(idx) + " ---"
        print_undo_log_normal_page(bin_fp, report_fp)
        print >> report_fp
        idx = idx + 1

report_fp.close()
print "Report generated, check " + report_file + " for details"
