#!/usr/bin/python

# This script is used to parse mysql ibd file.
# Author: Nicole Nie (2017/11/24)
#
# Usage: ./parsemysqlibd <ibd_file> [, <out_dir>]
#
# Note:
# 1. The ibd_file should be the path to the .ibd file
# 2. The out_dir is current dir if not defined

import os
import struct
import sys

# Predefined constants.
UNIV_PAGE_SIZE = 16384
FSP_TRX_SYS_PAGE_NO = 5 # transaction system header, in tablespace 0

FIL_PAGE_TYPE = 24
FIL_PAGE_DATA = 38
PAGE_DATA = (FIL_PAGE_DATA + 36 + 2 * 10)

# The low 4 bytes of this are used to store the page checksum, the last 4 bytes
# should be identical to the last 4 bytes of FIL_PAGE_LSN
FIL_PAGE_END_LSN_OLD_CHKSUM = 8
FIL_PAGE_DATA_END = 8

# The offset of the doublewrite buffer header on the trx system header page
TRX_SYS_DOUBLEWRITE = (UNIV_PAGE_SIZE - 200)

TRX_SYS_DOUBLEWRITE_MAGIC_N = 536853855

TRX_SYS_N_RSEGS = 128
TRX_SYS_OLD_N_RSEGS = 256

TRX_RSEG_N_SLOTS = 1024
XIDDATASIZE = 128

# File space header size
FSP_HEADER_SIZE = 112

# Index node
FIL_PAGE_INODE = 3
# File space header
FIL_PAGE_TYPE_FSP_HDR = 8
# Extent descriptor page
FIL_PAGE_TYPE_XDES = 9

FSEG_ARR_OFFSET = 50
FIL_PAGE_INDEX = 17855
FIL_PAGE_UNDO_LOG = 2
# Transaction system data
FIL_PAGE_TYPE_TRX_SYS = 7
# System page
FIL_PAGE_TYPE_SYS = 6

REC_N_NEW_EXTRA_BYTES = 5
REC_N_OLD_EXTRA_BYTES = 6

# Types of an undo log segment
TRX_UNDO_INSERT = 1 # contains undo entries for inserts
TRX_UNDO_UPDATE = 2 # contains undo entries for updates and delete markings:
# in short, modifys (the name 'UPDATE' is a historical relic)

TRX_UNDO_INSERT_REC = 11 # fresh insert into clustered index
TRX_UNDO_UPD_EXIST_REC = 12 # update of a non-delete-marked record
TRX_UNDO_UPD_DEL_REC = 13 # update of a delete marked record to a not delete
# marked record; also the fields of the record can change
TRX_UNDO_DEL_MARK_REC = 14 # delete marking of a record; fields do not change

TRX_UNDO_CMPL_INFO_MULT = 16 # compilation info is multiplied by this and ORed
# to the type above
TRX_UNDO_MODIFY_BLOB = 64 # If this bit is set in type_cmpl, then the undo log
# record has support for partial update of BLOBs. Also to make the undo log
# format extensible, introducing a new flag next to the type_cmpl flag.

# Size of the undo log header without XID information
TRX_UNDO_LOG_OLD_HDR_SIZE = 46

def mach_read_from_1(fp):
    c0, = struct.unpack('B', fp.read(1))
    return (c0)

def mach_read_from_2(fp):
    c0,c1 = struct.unpack('BB', fp.read(2))
    return (c0<<8) + (c1)

def mach_read_from_3(fp):
    c0,c1,c2 = struct.unpack('BBB', fp.read(3))
    return (c0<<16) + (c1<<8) + (c2)

def mach_read_from_4(fp):
    c0,c1,c2,c3 = struct.unpack('BBBB', fp.read(4))
    # print ("{0:d} {1:d} {2:d} {3:d}".format(c0, c1, c2, c3)),
    return (c0<<24) + (c1<<16) + (c2<<8) + (c3)

def mach_read_from_8(fp):
    c0,c1,c2,c3,c4,c5,c6,c7 = struct.unpack('BBBBBBBB', fp.read(8))
    return (c0<<56) + (c1<<48) + (c2<<40) + (c3<<32) + (c4<<24) + (c5<<16) + (c6<<8) + (c7)

def mach_read_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        return (val)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
        fp.seek(-2, 1)
        return (val)
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
        fp.seek(-3, 1)
        return (val)
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
        fp.seek(-4, 1)
        return (val)
    else:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
        fp.seek(-5, 1)
        return (val)

def mach_read_next_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        fp.seek(1, 1)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
    else:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
    return (val)

def mach_read_next_much_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        fp.seek(1, 1)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
    elif val == 0xF0:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
    else:
        # 11111111 followed by up to 64 bits
        fp.seek(1, 1)
        val = mach_read_next_compressed(fp)
        val = val << 32
        val |= mach_read_next_compressed(fp)
    return (val)

def mach_u64_read_next_compressed(fp):
  val = mach_read_next_compressed(fp)
  val <<= 32
  val |= mach_read_from_4(fp)
  return (val)

def hex_print_from_n(bin_fp, report_fp, n):
    cnt = 0
    while cnt < n:
        c, = struct.unpack('B', bin_fp.read(1))
        print >> report_fp, ("{0:02X}".format(c)),
        cnt = cnt + 1
    print >> report_fp

def print_fil_header(bin_fp, report_fp):
    print >> report_fp, "FIL_PAGE_CHKSUM:",
    hex_print_from_n(bin_fp, report_fp, 4)
    print >> report_fp, "FIL_PAGE_OFFSET:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_PREV:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_NEXT:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_LSN:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FIL_PAGE_TYPE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FIL_PAGE_FILE_FLUSH_LSN:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FIL_PAGE_SPACE_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))

def print_fil_tailer(bin_fp, report_fp):
    print >> report_fp, "FIL_PAGE_END_LSN_OLD_CHKSUM:",
    hex_print_from_n(bin_fp, report_fp, 8)

def print_xdes_entry(bin_fp, report_fp, cnt):
    print >> report_fp, ("> XDES entry #{0:d}".format(cnt))
    print >> report_fp, "\tXDES_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "\tXDES_FLST_NODE:"
    print >> report_fp, "\t- FLST_PREV [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "\t- FLST_NEXT [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    xdes_state = mach_read_from_4(bin_fp)
    if xdes_state == 0:
      print >> report_fp, "\tXDES_STATE: XDES_NOT_INITED"
    elif xdes_state == 1:
      print >> report_fp, "\tXDES_STATE: XDES_FREE"
    elif xdes_state == 2:
      print >> report_fp, "\tXDES_STATE: XDES_FREE_FRAG"
    elif xdes_state == 3:
      print >> report_fp, "\tXDES_STATE: XDES_FULL_FRAG"
    elif xdes_state == 4:
      print >> report_fp, "\tXDES_STATE: XDES_FSEG"
    elif xdes_state == 5:
      print >> report_fp, "\tXDES_STATE: XDES_FSEG_FRAG"
    else:
      print >> report_fp, "\tXDES_STATE:", ("UNKNOWN_{0:d}".format(xdes_state))
    print >> report_fp, "\tXDES_BITMAP:",
    hex_print_from_n(bin_fp, report_fp, 16)

def print_fsp_hdr_content(bin_fp, report_fp):
    print >> report_fp, "--- File space header page ---"
    print >> report_fp, "FSP_SPACE_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_NOT_USED:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_SIZE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_FREE_LIMIT:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_SPACE_FLAGS:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_FRAG_N_USED:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_FREE:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FSP_FREE_FRAG:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FSP_FULL_FRAG:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FSP_SEG_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FSP_SEG_INODES_FULL:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FSP_SEG_INODES_FREE:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    cnt = 0
    while cnt < 256:
      print_xdes_entry(bin_fp, report_fp, cnt)
      cnt = cnt + 1

def print_inode_content(bin_fp, report_fp):
    print >> report_fp, "--- Index node page ---"
    print >> report_fp, "FSEG_INODE_PAGE_NODE:"
    print >> report_fp, "- FLST_PREV [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_NEXT [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    cnt = 0
    while cnt < 85:
      print >> report_fp, ("> INODE #{0:d}".format(cnt))
      print >> report_fp, "\tFSEG_ID:",
      print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
      print >> report_fp, "\tFSEG_NOT_FULL_N_USED:",
      print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
      print >> report_fp, "\tFSEG_FREE:"
      print >> report_fp, "\t- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
      print >> report_fp, "\t- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\t- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\tFSEG_NOT_FULL:"
      print >> report_fp, "\t- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
      print >> report_fp, "\t- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\t- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\tFSEG_FULL:"
      print >> report_fp, "\t- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
      print >> report_fp, "\t- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\t- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\tFSEG_MAGIC_N:",
      print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
      slot = 0
      while slot < 32:
        print >> report_fp, ("\tSlot #{0:d}:".format(slot)),
        print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
        slot = slot + 1
      cnt = cnt + 1

def print_xdes_content(bin_fp, report_fp):
    print >> report_fp, "--- Extent descriptor page ---"
    cnt = 0
    while cnt < 256:
      print_xdes_entry(bin_fp, report_fp, cnt)
      cnt = cnt + 1

def print_page_record(bin_fp, report_fp, rec_offset):
    bin_fp.seek(rec_offset - 6)
    base_offset = rec_offset & (16384-1)
    print >> report_fp, "\t\tOFFSET:", str(base_offset)
    print >> report_fp, "\t\tNULL BITS:",
    null_bits = mach_read_from_1(bin_fp)
    print >> report_fp, ("{0:08b}".format(null_bits))
    info_bits = mach_read_from_1(bin_fp)
    print >> report_fp, "\t\tINFO BITS (?|?|DELETED|MIN_REC):",
    print >> report_fp, ("{0:04b}".format((null_bits>>4)))
    print >> report_fp, "\t\tN_OWNED:",
    print >> report_fp, ("{0:d}".format((null_bits & 15)))
    rec_info = mach_read_from_2(bin_fp)
    print >> report_fp, "\t\tHEAP_NO:",
    heap_no = (rec_info>>3)
    if heap_no == 0:
        print >> report_fp, "0-PAGE_HEAP_NO_INFIMUM"
    elif heap_no == 1:
        print >> report_fp, "1-PAGE_HEAP_NO_SUPREMUM"
    elif heap_no == 2:
        print >> report_fp, "2-PAGE_HEAP_NO_USER_LOW"
    else:
        print >> report_fp, ("{0:d}".format(heap_no))
    print >> report_fp, "\t\tRECORD_TYPE:",
    rec_type = (rec_info & 7)
    if rec_type == 0:
        print >> report_fp, "000-Regular"
    elif rec_type == 1:
        print >> report_fp, "001-B+ Tree Node"
    elif rec_type == 2:
        print >> report_fp, "010-Infimum"
    elif rec_type == 3:
        print >> report_fp, "011-Supremum"
    else:
        print >> report_fp, "1xx-Reserved"
    print >> report_fp, "\t\tNEXT OFFSET:",
    incr_offset = mach_read_from_2(bin_fp)
    if (base_offset + incr_offset) > UNIV_PAGE_SIZE:
        print >> report_fp, ("{0:d}".format((base_offset + incr_offset) % UNIV_PAGE_SIZE))
    else:
        print >> report_fp, ("{0:d}".format((base_offset + incr_offset)))
    if rec_type == 0 or rec_type == 1:
        print >> report_fp, "\t\tRECORD CONTENT:",
        if (base_offset + incr_offset) < UNIV_PAGE_SIZE:
            if incr_offset < (256+6):
                hex_print_from_n(bin_fp, report_fp, (incr_offset-6))
            else:
                hex_print_from_n(bin_fp, report_fp, 256)
        else:
            print >> report_fp, "..."

def print_page_content(bin_fp, report_fp, init_offset):
    print >> report_fp, "PAGE_N_DIR_SLOTS:",
    page_n_dir_slots = mach_read_from_2(bin_fp)
    print >> report_fp, ("{0:d}".format(page_n_dir_slots))
    print >> report_fp, "PAGE_HEAP_TOP:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    page_n_heap = mach_read_from_2(bin_fp)
    if (page_n_heap & 0x8000) == 0x8000:
        page_n_heap = page_n_heap & ~0x8000
        is_comp = True
        print >> report_fp, "PAGE_N_HEAP (new-style compact format):",
    else:
        is_comp = False
        print >> report_fp, "PAGE_N_HEAP (old-style redundant format):",
    print >> report_fp, ("{0:d}".format(page_n_heap))
    print >> report_fp, "PAGE_FREE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_GARBAGE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_LAST_INSERT:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_DIRECTION:",
    page_direction = mach_read_from_2(bin_fp)
    if page_direction == 1:
        print >> report_fp, "1-PAGE_LEFT"
    elif page_direction == 2:
        print >> report_fp, "2-PAGE_RIGHT"
    elif page_direction == 3:
        print >> report_fp, "3-PAGE_SAME_REC"
    elif page_direction == 4:
        print >> report_fp, "4-PAGE_SAME_PAGE"
    elif page_direction == 5:
        print >> report_fp, "5-PAGE_NO_DIRECTION"
    else:
        print >> report_fp, ("{0:d}-UNKNOWN".format(page_direction))
    print >> report_fp, "PAGE_N_DIRECTION:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_N_RECS:",
    page_n_recs = mach_read_from_2(bin_fp)
    print >> report_fp, ("{0:d}".format(page_n_recs))
    print >> report_fp, "PAGE_MAX_TRX_ID:",
    hex_print_from_n(bin_fp, report_fp, 8)
    print >> report_fp, "PAGE_LEVEL:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_INDEX_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "PAGE_BTR_SEG_LEAF (for root only):"
    print >> report_fp, ("- FSEG_HDR_SPACE: {0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, ("- FSEG_HDR_PAGE_NO: {0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, ("- FSEG_HDR_OFFSET: {0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_BTR_SEG_TOP (for root only):"
    print >> report_fp, ("- FSEG_HDR_SPACE: {0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, ("- FSEG_HDR_PAGE_NO: {0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, ("- FSEG_HDR_OFFSET: {0:d}".format(mach_read_from_2(bin_fp)))
    if is_comp:
        infimum = PAGE_DATA + 5
        supremum = PAGE_DATA + 2*REC_N_NEW_EXTRA_BYTES + 8
        record_extra_bytes = REC_N_NEW_EXTRA_BYTES
        bin_fp.seek(init_offset + infimum - 2)
        record_offset = infimum + mach_read_from_2(bin_fp)
    else:
        infimum = PAGE_DATA + 1  + REC_N_OLD_EXTRA_BYTES
        supremum = PAGE_DATA + 2 + 2*REC_N_OLD_EXTRA_BYTES + 8
        record_extra_bytes = REC_N_OLD_EXTRA_BYTES
        bin_fp.seek(init_offset + infimum - 2)
        record_offset = mach_read_from_2(bin_fp)
    print >> report_fp, "REC OFFSETS:", str(page_n_recs), "EXPECTED"
    print >> report_fp, "\tOFFSET TO INFIMUM:", str(infimum)
    if is_comp:
        print_page_record(bin_fp, report_fp, (init_offset + infimum))
    print >> report_fp, "\tOFFSET TO SUPREMUM:", str(supremum)
    if is_comp:
        print_page_record(bin_fp, report_fp, (init_offset + supremum))
    idx = 0
    while (record_offset < UNIV_PAGE_SIZE - record_extra_bytes) and (record_offset != supremum):
        print >> report_fp, "\tOFFSET TO REC #" + str(idx) + ":", str(record_offset)
        if is_comp:
            print_page_record(bin_fp, report_fp, (init_offset + record_offset))
            bin_fp.seek(init_offset + record_offset - 2)
            incr_offset = mach_read_from_2(bin_fp)
            if incr_offset == 0:
                print >> report_fp, "\t***FATAL ERROR DURING PARSING***"
                break
            record_offset = record_offset + incr_offset
        else:
            bin_fp.seek(init_offset + record_offset - 2)
            next_offset = mach_read_from_2(bin_fp)
            if (next_offset == 0) or (next_offset == record_offset):
                print >> report_fp, "\t***FATAL ERROR DURING PARSING***"
                break
            record_offset = next_offset
        if record_offset > UNIV_PAGE_SIZE:
            record_offset = record_offset % UNIV_PAGE_SIZE
        idx = idx + 1
    return page_n_dir_slots

def print_page_directory(bin_fp, report_fp, page_n_dir_slots):
    cnt = 0
    print >> report_fp, "PAGE_DIRECTORY:", str(page_n_dir_slots), "SLOTS"
    while cnt < page_n_dir_slots:
        print >> report_fp, "\tSLOT[" + str(cnt) + "]:",
        print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        bin_fp.seek(-4, 1)
        cnt = cnt + 1

def print_undo_log_records(bin_fp, report_fp, offset, undo_log_offset, trx_undo_page_free):
    cnt = 0
    while undo_log_offset > 0 and undo_log_offset < trx_undo_page_free:
        print >> report_fp, "UNDO LOG REC #" + str(cnt) + ":"
        print >> report_fp, "\tOFFSET TO UNDO REC:",
        print >> report_fp, ("{0:d}".format(undo_log_offset))
        bin_fp.seek(offset + undo_log_offset)
        print >> report_fp, "\tOFFSET TO NEXT UNDO REC:",
        next_undo_log_offset = mach_read_from_2(bin_fp)
        print >> report_fp, ("{0:d}".format(next_undo_log_offset))
        undo_rec_type = mach_read_from_1(bin_fp)
        blob_undo = 0
        if undo_rec_type == TRX_UNDO_INSERT_REC:
            print >> report_fp, "\tUNDO REC TYPE:", "TRX_UNDO_INSERT_REC"
        else:
            print >> report_fp, "\tUNDO REC TYPE:",
            if undo_rec_type > TRX_UNDO_MODIFY_BLOB:
                print >> report_fp, "TRX_UNDO_MODIFY_BLOB |",
                undo_rec_type -= TRX_UNDO_MODIFY_BLOB
                blob_undo = 1
            if undo_rec_type > TRX_UNDO_CMPL_INFO_MULT:
                cmpl_info = undo_rec_type / TRX_UNDO_CMPL_INFO_MULT
                print >> report_fp, ("TRX_UNDO_CMPL_INFO_MULT*{0:d} |".format(cmpl_info)),
                undo_rec_type -= cmpl_info * TRX_UNDO_CMPL_INFO_MULT
            if undo_rec_type == TRX_UNDO_UPD_EXIST_REC:
                print >> report_fp, "TRX_UNDO_UPD_EXIST_REC"
            elif undo_rec_type == TRX_UNDO_UPD_DEL_REC:
                print >> report_fp, "TRX_UNDO_UPD_DEL_REC"
            elif undo_rec_type == TRX_UNDO_DEL_MARK_REC:
                print >> report_fp, "TRX_UNDO_DEL_MARK_REC"
            else:
                print >> report_fp, ("UNKNOWN_{0:d}".format(undo_rec_type))
        if blob_undo == 1:
            # Introduced a new 1-byte flag in trx_undo_page_report_modify
            bin_fp.seek(1, 1)
        print >> report_fp, "\tUNDO REC NO:",
        undo_no = mach_read_next_much_compressed(bin_fp)
        print >> report_fp, ("{0:d}".format(undo_no))
        print >> report_fp, "\tTABLE ID:",
        table_id = mach_read_next_much_compressed(bin_fp)
        print >> report_fp, ("{0:d}".format(table_id))
        if undo_rec_type == TRX_UNDO_INSERT_REC:
            primary_key_offset = bin_fp.tell() - offset
            while primary_key_offset < next_undo_log_offset - 2:
                print >> report_fp, "\tPRIMARY KEY LEN:",
                primary_key_len = mach_read_from_1(bin_fp)
                print >> report_fp, ("{0:d}".format(primary_key_len))
                print >> report_fp, "\tPRIMARY KEY VAL:",
                hex_print_from_n(bin_fp, report_fp, primary_key_len)
                primary_key_offset = primary_key_offset + 1 + primary_key_len
                bin_fp.seek(offset + primary_key_offset)
            print >> report_fp, "\tOFFSET TO START:",
            print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        elif undo_rec_type == TRX_UNDO_UPD_EXIST_REC or undo_rec_type == TRX_UNDO_UPD_DEL_REC or undo_rec_type == TRX_UNDO_DEL_MARK_REC:
            print >> report_fp, "\tINFO BITS:",
            hex_print_from_n(bin_fp, report_fp, 1)
            print >> report_fp, "\tDATA_TRX_ID:",
            trx_id = mach_u64_read_next_compressed(bin_fp)
            print >> report_fp, ("{0:d}".format(trx_id))
            print >> report_fp, "\tDATA_ROLL_PTR:"
            roll_ptr = mach_u64_read_next_compressed(bin_fp)
            print >> report_fp, "\t- offset:",
            print >> report_fp, ("{0:d}".format(roll_ptr & 0xFFFF))
            roll_ptr = (roll_ptr >> 16)
            print >> report_fp, "\t- page no:",
            print >> report_fp, ("{0:d}".format(roll_ptr & 0xFFFFFFFF))
            roll_ptr = (roll_ptr >> 32)
            print >> report_fp, "\t- rollback segment id:",
            print >> report_fp, ("{0:d}".format(roll_ptr & 0x7F))
            roll_ptr = (roll_ptr >> 7)
            if roll_ptr == 1:
                print >> report_fp, "\t- is insert: TRUE"
            else:
                print >> report_fp, "\t- is insert: FALSE"
            print >> report_fp, "\tPRIM_KEY/N_FIELDS/COL_ID/COL:",
            xxx_offset = bin_fp.tell() - offset
            hex_print_from_n(bin_fp, report_fp, next_undo_log_offset - xxx_offset - 2)
            print >> report_fp, "\tOFFSET TO START:",
            print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        undo_log_offset = next_undo_log_offset
        cnt = cnt + 1

def print_undo_log_segment_header(bin_fp, report_fp, offset):
    print >> report_fp, "--- TRX_UNDO_SEG_HDR (1st page of the undo log segment) ---"
    trx_undo_state = mach_read_from_2(bin_fp)
    if trx_undo_state == 1:
        print >> report_fp, "TRX_UNDO_STATE: TRX_UNDO_ACTIVE"
    elif trx_undo_state == 2:
        print >> report_fp, "TRX_UNDO_STATE: TRX_UNDO_CACHED"
    elif trx_undo_state == 3:
        print >> report_fp, "TRX_UNDO_STATE: TRX_UNDO_FREE"
    elif trx_undo_state == 4:
        print >> report_fp, "TRX_UNDO_STATE: TRX_UNDO_TO_PURGE"
    elif trx_undo_state == 5:
        print >> report_fp, "TRX_UNDO_STATE: TRX_UNDO_PREPARED"
    else:
        print >> report_fp, ("TRX_UNDO_STATE: UNKNOWN_{0:d}".format(trx_undo_state))
    trx_undo_last_log = mach_read_from_2(bin_fp)
    print >> report_fp, "TRX_UNDO_LAST_LOG:",
    print >> report_fp, ("{0:d}".format(trx_undo_last_log))
    print >> report_fp, "TRX_UNDO_FSEG_HEADER (SPACE:PAGE_NO OFFSET):",
    print >> report_fp, ("({0:d}:{1:d} {2:d})".format(mach_read_from_4(bin_fp), mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    print >> report_fp, "TRX_UNDO_PAGE_LIST (FLST_LEN):",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "TRX_UNDO_PAGE_LIST (FLST_FIRST):",
    print >> report_fp, ("({0:d} {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    print >> report_fp, "TRX_UNDO_PAGE_LIST (FLST_LAST):",
    print >> report_fp, ("({0:d} {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    bin_fp.seek(offset + trx_undo_last_log)
    while True:
        ptr = bin_fp.tell() - offset
        print >> report_fp, "Undo log header at offset " + str(ptr) + ":"
        print >> report_fp, "\tTRX_UNDO_TRX_ID:",
        print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_TRX_NO:",
        print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_DEL_MARKS:",
        print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_LOG_START:",
        print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_FLAGS:",
        print >> report_fp, ("{0:d}".format(mach_read_from_1(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_DICT_TRANS:",
        print >> report_fp, ("{0:d}".format(mach_read_from_1(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_TABLE_ID:",
        print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_NEXT_LOG:",
        print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_PREV_LOG:",
        trx_undo_prev_log = mach_read_from_2(bin_fp)
        print >> report_fp, ("{0:d}".format(trx_undo_prev_log))
        print >> report_fp, "\tTRX_UNDO_HISTORY_NODE (FLST_PREV):",
        print >> report_fp, ("({0:d} {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_HISTORY_NODE (FLST_NEXT):",
        print >> report_fp, ("({0:d} {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_XA_FORMAT:",
        print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_XA_TRID_LEN:",
        print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_XA_BQUAL_LEN:",
        print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
        print >> report_fp, "\tTRX_UNDO_XA_XID:",
        hex_print_from_n(bin_fp, report_fp, XIDDATASIZE)
        if trx_undo_prev_log == 0:
            break
        bin_fp.seek(offset + trx_undo_prev_log)

def print_undo_log_normal_page(bin_fp, report_fp, offset):
    print >> report_fp, "--- UNDO LOG NORMAL PAGE ---"
    print >> report_fp, "TRX_UNDO_PAGE_TYPE:",
    trx_undo_page_type = mach_read_from_2(bin_fp)
    if trx_undo_page_type == TRX_UNDO_INSERT:
        print >> report_fp, "TRX_UNDO_INSERT"
    elif trx_undo_page_type == TRX_UNDO_UPDATE:
        print >> report_fp, "TRX_UNDO_UPDATE"
    else:
        print >> report_fp, ("UNKNOWN_{0:d}".format(trx_undo_page_type))
    print >> report_fp, "TRX_UNDO_PAGE_START:",
    trx_undo_page_start = mach_read_from_2(bin_fp)
    print >> report_fp, ("{0:d}".format(trx_undo_page_start))
    print >> report_fp, "TRX_UNDO_PAGE_FREE:",
    trx_undo_page_free = mach_read_from_2(bin_fp)
    print >> report_fp, ("{0:d}".format(trx_undo_page_free))
    print >> report_fp, "TRX_UNDO_PAGE_NODE (FLST_PREV):",
    flst_prev_page_no = mach_read_from_4(bin_fp)
    print >> report_fp, ("({0:d} {1:d})".format(flst_prev_page_no, mach_read_from_2(bin_fp)))
    print >> report_fp, "TRX_UNDO_PAGE_NODE (FLST_NEXT):",
    print >> report_fp, ("({0:d} {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    if flst_prev_page_no == 0xFFFFFFFF:
        # This is the first page of the undo log segment
        print_undo_log_segment_header(bin_fp, report_fp, offset)
    # undo_log_offset = bin_fp.tell() - offset
    # print_undo_log_records(bin_fp, report_fp, offset, undo_log_offset, trx_undo_page_free)
    print_undo_log_records(bin_fp, report_fp, offset, trx_undo_page_start, trx_undo_page_free)

def print_trx_system_page(bin_fp, report_fp, offset):
    print >> report_fp, "--- TRX SYSTEM PAGE ---"
    print >> report_fp, "TRX_SYS_TRX_ID_STORE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "TRX_SYS_FSEG_HEADER (SPACE:PAGE_NO OFFSET):",
    print >> report_fp, ("({0:d}:{1:d} {2:d})".format(mach_read_from_4(bin_fp), mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    cnt = 0
    while cnt < TRX_SYS_N_RSEGS:
        if cnt >= 1 and cnt <= 32:
            print >> report_fp, "TRX_SYS_RSEGS[" + str(cnt) + "] (for temporary tables only):",
        else:
            print >> report_fp, "TRX_SYS_RSEGS[" + str(cnt) + "]:",
        space = mach_read_from_4(bin_fp)
        page_no = mach_read_from_4(bin_fp)
        print >> report_fp, ("{0:d}:{1:d}".format(space, page_no))
        cnt = cnt + 1
    bin_fp.seek(offset + TRX_SYS_DOUBLEWRITE)
    print >> report_fp, "TRX_SYS_DOUBLEWRITE_FSEG (SPACE:PAGE_NO OFFSET):",
    print >> report_fp, ("({0:d}:{1:d} {2:d})".format(mach_read_from_4(bin_fp), mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    print >> report_fp, "TRX_SYS_DOUBLEWRITE_MAGIC:",
    trx_sys_doublewrite_magic_n = mach_read_from_4(bin_fp)
    print >> report_fp, ("{0:d}".format(trx_sys_doublewrite_magic_n)),
    if trx_sys_doublewrite_magic_n == TRX_SYS_DOUBLEWRITE_MAGIC_N:
        print >> report_fp, "# The doublewrite buffer has been created"
    else:
        print >> report_fp, "# The doublewrite buffer not created"

def print_rollback_segment_header_page(bin_fp, report_fp):
    print >> report_fp, "--- ROLLBACK SEGMENT HEADER PAGE ---"
    print >> report_fp, "TRX_RSEG_MAX_SIZE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "TRX_RSEG_HISTORY_SIZE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "TRX_RSEG_HISTORY (FLST_LEN):",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "TRX_RSEG_HISTORY (FLST_FIRST):",
    print >> report_fp, ("({0:d} {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    print >> report_fp, "TRX_RSEG_HISTORY (FLST_LAST):",
    print >> report_fp, ("({0:d} {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    print >> report_fp, "TRX_RSEG_FSEG_HEADER (SPACE:PAGE_NO OFFSET):",
    print >> report_fp, ("({0:d}:{1:d} {2:d})".format(mach_read_from_4(bin_fp), mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    cnt = 0
    while cnt < TRX_RSEG_N_SLOTS:
        page_no = mach_read_from_4(bin_fp)
        print >> report_fp, "TRX_RSEG_UNDO_SLOTS[" + str(cnt) + "]:",
        print >> report_fp, ("{0:d}".format(page_no))
        cnt = cnt + 1

def print_ibd_page(bin_fp, report_fp):
    offset = bin_fp.tell()
    print_fil_header(bin_fp, report_fp)
    bin_fp.seek(offset + FIL_PAGE_TYPE)
    fil_page_type = mach_read_from_2(bin_fp)
    if fil_page_type == FIL_PAGE_TYPE_FSP_HDR:
        bin_fp.seek(offset + FIL_PAGE_DATA)
        print_fsp_hdr_content(bin_fp, report_fp)
    elif fil_page_type == FIL_PAGE_INODE:
        bin_fp.seek(offset + FIL_PAGE_DATA)
        print_inode_content(bin_fp, report_fp)
    elif fil_page_type == FIL_PAGE_TYPE_XDES:
        bin_fp.seek(offset + FIL_PAGE_DATA + FSP_HEADER_SIZE)
        print_xdes_content(bin_fp, report_fp)
    elif fil_page_type == FIL_PAGE_INDEX:
        bin_fp.seek(offset + FIL_PAGE_DATA)
        page_n_dir_slots = print_page_content(bin_fp, report_fp, offset)
        bin_fp.seek(offset + UNIV_PAGE_SIZE - 10)
        print_page_directory(bin_fp, report_fp, page_n_dir_slots)
    elif fil_page_type == FIL_PAGE_UNDO_LOG:
        bin_fp.seek(offset + FIL_PAGE_DATA)
        print_undo_log_normal_page(bin_fp, report_fp, offset)
    elif fil_page_type == FIL_PAGE_TYPE_TRX_SYS:
        bin_fp.seek(offset + FIL_PAGE_DATA)
        print_trx_system_page(bin_fp, report_fp, offset)
    elif fil_page_type == FIL_PAGE_TYPE_SYS:
        bin_fp.seek(offset + FIL_PAGE_DATA)
        print_rollback_segment_header_page(bin_fp, report_fp)
    bin_fp.seek(offset + UNIV_PAGE_SIZE - 8)
    print_fil_tailer(bin_fp, report_fp)

# User input variables.
if not len(sys.argv) == 2 and not len(sys.argv) == 3:
    print "Usage: ./parsemysqlibd <ibd_file> [, <out_dir>]"
    sys.exit(1)

ibd_file = sys.argv[1]
if os.path.isfile(ibd_file):
    ibd_file = os.path.abspath(ibd_file)
else:
    print "Unknown ibd file " + ibd_file
    sys.exit(1)

if len(sys.argv) == 2:
    out_dir = os.getcwd()
else:
    out_dir = sys.argv[2]
    if os.path.isdir(out_dir):
        out_dir = os.path.abspath(out_dir)
    else:
        print "Unknown output directory " + out_dir
        sys.exit(1)
report_file = os.path.join(out_dir, os.path.basename(ibd_file) + ".report")
report_fp = open(report_file, 'w')

with open(ibd_file, 'rb') as bin_fp:
    bin_fp.seek(0, 2) # seek to the end of the file
    num_pages = bin_fp.tell() / UNIV_PAGE_SIZE
    idx = 0
    while idx < num_pages:
        bin_fp.seek(UNIV_PAGE_SIZE*idx)
        print >> report_fp, "--- IBD PAGE #" + str(idx) + " ---"
        print_ibd_page(bin_fp, report_fp)
        print >> report_fp
        idx = idx + 1

report_fp.close()
print "Report generated, check " + report_file + " for details"
