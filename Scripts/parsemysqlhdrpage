#!/usr/bin/python

# This script is used to parse mysql FSP_HDR & INODE pages
# pages.
# Author: Yuanyuan Nie (2020/03/18)
#
# Usage: ./parsemysqlhdrpage <page_file> [, <out_dir>]
#
# Note:
# 1. The page_file should be the path to the hdr page file
# 2. The out_dir is current dir if not defined

import os
import struct
import sys

# Predefined constants.
UNIV_PAGE_SIZE = 16384
FSP_TRX_SYS_PAGE_NO = 5 # transaction system header, in tablespace 0

FIL_PAGE_TYPE = 24
FIL_PAGE_DATA = 38

# The low 4 bytes of this are used to store the page checksum, the last 4 bytes
# should be identical to the last 4 bytes of FIL_PAGE_LSN
FIL_PAGE_END_LSN_OLD_CHKSUM = 8
FIL_PAGE_DATA_END = 8

# The offset of the doublewrite buffer header on the trx system header page
TRX_SYS_DOUBLEWRITE = (UNIV_PAGE_SIZE - 200)

TRX_SYS_DOUBLEWRITE_MAGIC_N = 536853855

TRX_SYS_N_RSEGS = 128
TRX_SYS_OLD_N_RSEGS = 256

TRX_RSEG_N_SLOTS = 1024
XIDDATASIZE = 128

# File space header size
FSP_HEADER_SIZE = 112

# Index node
FIL_PAGE_INODE = 3
# File space header
FIL_PAGE_TYPE_FSP_HDR = 8
# Extent descriptor page
FIL_PAGE_TYPE_XDES = 9

FSEG_ARR_OFFSET = 50

def mach_read_from_1(fp):
    c0, = struct.unpack('B', fp.read(1))
    return (c0)

def mach_read_from_2(fp):
    c0,c1 = struct.unpack('BB', fp.read(2))
    return (c0<<8) + (c1)

def mach_read_from_3(fp):
    c0,c1,c2 = struct.unpack('BBB', fp.read(3))
    return (c0<<16) + (c1<<8) + (c2)

def mach_read_from_4(fp):
    c0,c1,c2,c3 = struct.unpack('BBBB', fp.read(4))
    # print ("{0:d} {1:d} {2:d} {3:d}".format(c0, c1, c2, c3)),
    return (c0<<24) + (c1<<16) + (c2<<8) + (c3)

def mach_read_from_8(fp):
    c0,c1,c2,c3,c4,c5,c6,c7 = struct.unpack('BBBBBBBB', fp.read(8))
    return (c0<<56) + (c1<<48) + (c2<<40) + (c3<<32) + (c4<<24) + (c5<<16) + (c6<<8) + (c7)

def mach_read_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        return (val)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
        fp.seek(-2, 1)
        return (val)
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
        fp.seek(-3, 1)
        return (val)
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
        fp.seek(-4, 1)
        return (val)
    else:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
        fp.seek(-5, 1)
        return (val)

def mach_read_next_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        fp.seek(1, 1)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
    else:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
    return (val)

def mach_read_next_much_compressed(fp):
    val = mach_read_from_1(fp)
    fp.seek(-1, 1)
    if val < 0x80:
        # 0nnnnnnn (7 bits)
        fp.seek(1, 1)
    elif val < 0xC0:
        # 10nnnnnn nnnnnnnn (14 bits)
        val = mach_read_from_2(fp)
        val = val & 0x3FFF
    elif val < 0xE0:
        # 110nnnnn nnnnnnnn nnnnnnnn (21 bits)
        val = mach_read_from_3(fp)
        val = val & 0x1FFFFF
    elif val < 0xF0:
        # 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits)
        val = mach_read_from_4(fp)
        val = val & 0xFFFFFFF
    elif val == 0xF0:
        # 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits)
        fp.seek(1, 1)
        val = mach_read_from_4(fp)
    else:
        # 11111111 followed by up to 64 bits
        fp.seek(1, 1)
        val = mach_read_next_compressed(fp)
        val = val << 32
        val |= mach_read_next_compressed(fp)
    return (val)

def mach_u64_read_next_compressed(fp):
  val = mach_read_next_compressed(fp)
  val <<= 32
  val |= mach_read_from_4(fp)
  return (val)

def hex_print_from_n(bin_fp, report_fp, n):
    cnt = 0
    while cnt < n:
        c, = struct.unpack('B', bin_fp.read(1))
        print >> report_fp, ("{0:02X}".format(c)),
        cnt = cnt + 1
    print >> report_fp

def print_fil_header(bin_fp, report_fp):
    print >> report_fp, "FIL_PAGE_CHKSUM:",
    hex_print_from_n(bin_fp, report_fp, 4)
    print >> report_fp, "FIL_PAGE_OFFSET:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_PREV:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_NEXT:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_LSN:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FIL_PAGE_TYPE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FIL_PAGE_FILE_FLUSH_LSN:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FIL_PAGE_SPACE_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))

def print_fil_tailer(bin_fp, report_fp):
    print >> report_fp, "FIL_PAGE_END_LSN_OLD_CHKSUM:",
    hex_print_from_n(bin_fp, report_fp, 8)

def print_xdes_entry(bin_fp, report_fp, cnt):
    print >> report_fp, ("> XDES entry #{0:d}".format(cnt))
    print >> report_fp, "\tXDES_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "\tXDES_FLST_NODE:"
    print >> report_fp, "\t- FLST_PREV [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "\t- FLST_NEXT [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    xdes_state = mach_read_from_4(bin_fp)
    if xdes_state == 0:
      print >> report_fp, "\tXDES_STATE: XDES_NOT_INITED"
    elif xdes_state == 1:
      print >> report_fp, "\tXDES_STATE: XDES_FREE"
    elif xdes_state == 2:
      print >> report_fp, "\tXDES_STATE: XDES_FREE_FRAG"
    elif xdes_state == 3:
      print >> report_fp, "\tXDES_STATE: XDES_FULL_FRAG"
    elif xdes_state == 4:
      print >> report_fp, "\tXDES_STATE: XDES_FSEG"
    elif xdes_state == 5:
      print >> report_fp, "\tXDES_STATE: XDES_FSEG_FRAG"
    else:
      print >> report_fp, "\tXDES_STATE:", ("UNKNOWN_{0:d}".format(xdes_state))
    print >> report_fp, "\tXDES_BITMAP:",
    hex_print_from_n(bin_fp, report_fp, 16)

def print_fsp_hdr_content(bin_fp, report_fp):
    print >> report_fp, "--- File space header page ---"
    print >> report_fp, "FSP_SPACE_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_NOT_USED:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_SIZE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_FREE_LIMIT:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_SPACE_FLAGS:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_FRAG_N_USED:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FSP_FREE:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FSP_FREE_FRAG:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FSP_FULL_FRAG:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FSP_SEG_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FSP_SEG_INODES_FULL:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "FSP_SEG_INODES_FREE:"
    print >> report_fp, "- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
    print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
    print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
    cnt = 0
    while cnt < 256:
      print_xdes_entry(bin_fp, report_fp, cnt)
      cnt = cnt + 1

def print_inode_content(bin_fp, report_fp):
    print >> report_fp, "--- Index node page ---"
    cnt = 0
    while cnt < 85:
      print >> report_fp, ("> INODE #{0:d}".format(cnt))
      print >> report_fp, "\tFSEG_ID:",
      print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
      print >> report_fp, "\tFSEG_NOT_FULL_N_USED:",
      print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
      print >> report_fp, "\tFSEG_FREE:"
      print >> report_fp, "\t- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
      print >> report_fp, "\t- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\t- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\tFSEG_NOT_FULL:"
      print >> report_fp, "\t- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
      print >> report_fp, "\t- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\t- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\tFSEG_FULL:"
      print >> report_fp, "\t- FLST_LEN:", ("{0:d}".format(mach_read_from_4(bin_fp)))
      print >> report_fp, "\t- FLST_FIRST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\t- FLST_LAST [FIL_ADDR_PAGE, FIL_ADDR_BYTE]:",
      print >> report_fp, ("[{0:d},".format(mach_read_from_4(bin_fp))),
      print >> report_fp, ("{0:d}]".format(mach_read_from_2(bin_fp)))
      print >> report_fp, "\tFSEG_MAGIC_N:",
      print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
      slot = 0
      while slot < 32:
        print >> report_fp, ("\tSlot #{0:d}:".format(slot)),
        print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
        slot = slot + 1
      cnt = cnt + 1

def print_xdes_content(bin_fp, report_fp):
    print >> report_fp, "--- Extent descriptor page ---"
    cnt = 0
    while cnt < 256:
      print_xdes_entry(bin_fp, report_fp, cnt)
      cnt = cnt + 1

def print_fsp_hdr_page(bin_fp, report_fp):
    offset = bin_fp.tell()
    print_fil_header(bin_fp, report_fp)
    bin_fp.seek(offset + FIL_PAGE_TYPE)
    page_type = mach_read_from_2(bin_fp)
    if page_type == FIL_PAGE_TYPE_FSP_HDR:
        bin_fp.seek(offset + FIL_PAGE_DATA)
        print_fsp_hdr_content(bin_fp, report_fp)
    elif page_type == FIL_PAGE_INODE:
        bin_fp.seek(offset + FSEG_ARR_OFFSET)
        print_inode_content(bin_fp, report_fp)
    elif page_type == FIL_PAGE_TYPE_XDES:
        bin_fp.seek(offset + FIL_PAGE_DATA + FSP_HEADER_SIZE)
        print_xdes_content(bin_fp, report_fp)
    bin_fp.seek(offset + UNIV_PAGE_SIZE - 8)
    print_fil_tailer(bin_fp, report_fp)

# User input variables.
if not len(sys.argv) == 2 and not len(sys.argv) == 3:
    print "Usage: ./parsemysqlhdrpage <page_file> [, <out_dir>]"
    sys.exit(1)

page_file = sys.argv[1]
if os.path.isfile(page_file):
    page_file = os.path.abspath(page_file)
else:
    print "Unknown page file " + page_file
    sys.exit(1)

if len(sys.argv) == 2:
    out_dir = os.getcwd()
else:
    out_dir = sys.argv[2]
    if os.path.isdir(out_dir):
        out_dir = os.path.abspath(out_dir)
    else:
        print "Unknown output directory " + out_dir
        sys.exit(1)
report_file = os.path.join(out_dir, os.path.basename(page_file) + ".report")
report_fp = open(report_file, 'w')

with open(page_file, 'rb') as bin_fp:
    bin_fp.seek(0, 2) # seek to the end of the file
    num_pages = bin_fp.tell() / UNIV_PAGE_SIZE
    idx = 0
    while idx < num_pages:
        bin_fp.seek(UNIV_PAGE_SIZE*idx)
        print >> report_fp, "--- HDR PAGE #" + str(idx) + " ---"
        print_fsp_hdr_page(bin_fp, report_fp)
        print >> report_fp
        idx = idx + 1

report_fp.close()
print "Report generated, check " + report_file + " for details"
